import process from "process";
import fs from 'fs';
import esbuild from "esbuild";
import builtins from 'builtin-modules'
import esbuildSvelte from "esbuild-svelte";
import { sveltePreprocess } from "svelte-preprocess";

const banner =
    `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

esbuild.build({
    banner: {
        js: banner,
    },
    entryPoints: ['main.ts'],
    bundle: true,
    external: [
        'obsidian',
        'electron',
        '@codemirror/autocomplete',
        '@codemirror/collab',
        '@codemirror/commands',
        '@codemirror/language',
        '@codemirror/lint',
        '@codemirror/search',
        '@codemirror/state',
        '@codemirror/view',
        '@lezer/common',
        '@lezer/highlight',
        '@lezer/lr',
        ...builtins],
    format: 'cjs',
    target: 'es2018',
    logLevel: "info",
    // minify: prod ? true : false,
    sourcemap: prod ? false : 'inline',
    treeShaking: true,
    outfile: 'main.js',
    minify: prod,
    plugins: [
        esbuildSvelte({
            preprocess: sveltePreprocess(),
        }),
        {
            name: "rename-styles",
            setup(build) {
                build.onEnd(() => {
                    const { outfile } = build.initialOptions;
                    const outcss = outfile.replace(/\.js$/, ".css");
                    const fixcss = outfile.replace(/main\.js$/, "styles.css");
                    if (fs.existsSync(outcss)) {
                        fs.renameSync(outcss, fixcss);
                    }
                });
            }
        }
    ]
}).then((result) => {
    if (process.env.NODE_ENV === 'development') {
        result.watch();
    }
}).catch(() => {
    process.exit(1);
});